From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@google.com>
Date: Sat, 8 Feb 2020 14:39:18 +0100
Subject: ANDROID: fix up uio_sys_stats to handle recent proc_ops changes

proc files have their own filesystem ops type now, to make things
smaller and simpler.  Fix up this code to handle this, otherwise it
breaks the build.

Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
Change-Id: I683c03a4744cb1356ba92bd5ed98adb395a3d1d5
---
 drivers/misc/uid_sys_stats.c | 36 ++++++++++++++++++------------------
 fs/proc/uid.c                | 10 +++++-----
 2 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/drivers/misc/uid_sys_stats.c b/drivers/misc/uid_sys_stats.c
index 49974954d4f0..3048edf85b46 100644
--- a/drivers/misc/uid_sys_stats.c
+++ b/drivers/misc/uid_sys_stats.c
@@ -385,11 +385,11 @@ static int uid_cputime_open(struct inode *inode, struct file *file)
 	return single_open(file, uid_cputime_show, PDE_DATA(inode));
 }
 
-static const struct file_operations uid_cputime_fops = {
-	.open		= uid_cputime_open,
-	.read		= seq_read,
-	.llseek		= seq_lseek,
-	.release	= single_release,
+static const struct proc_ops uid_cputime_fops = {
+	.proc_open	= uid_cputime_open,
+	.proc_read	= seq_read,
+	.proc_lseek	= seq_lseek,
+	.proc_release	= single_release,
 };
 
 static int uid_remove_open(struct inode *inode, struct file *file)
@@ -444,10 +444,10 @@ static ssize_t uid_remove_write(struct file *file,
 	return count;
 }
 
-static const struct file_operations uid_remove_fops = {
-	.open		= uid_remove_open,
-	.release	= single_release,
-	.write		= uid_remove_write,
+static const struct proc_ops uid_remove_fops = {
+	.proc_open	= uid_remove_open,
+	.proc_release	= single_release,
+	.proc_write	= uid_remove_write,
 };
 
 
@@ -563,11 +563,11 @@ static int uid_io_open(struct inode *inode, struct file *file)
 	return single_open(file, uid_io_show, PDE_DATA(inode));
 }
 
-static const struct file_operations uid_io_fops = {
-	.open		= uid_io_open,
-	.read		= seq_read,
-	.llseek		= seq_lseek,
-	.release	= single_release,
+static const struct proc_ops uid_io_fops = {
+	.proc_open	= uid_io_open,
+	.proc_read	= seq_read,
+	.proc_lseek	= seq_lseek,
+	.proc_release	= single_release,
 };
 
 static int uid_procstat_open(struct inode *inode, struct file *file)
@@ -620,10 +620,10 @@ static ssize_t uid_procstat_write(struct file *file,
 	return count;
 }
 
-static const struct file_operations uid_procstat_fops = {
-	.open		= uid_procstat_open,
-	.release	= single_release,
-	.write		= uid_procstat_write,
+static const struct proc_ops uid_procstat_fops = {
+	.proc_open	= uid_procstat_open,
+	.proc_release	= single_release,
+	.proc_write	= uid_procstat_write,
 };
 
 static int process_notifier(struct notifier_block *self,
diff --git a/fs/proc/uid.c b/fs/proc/uid.c
index 311717ea199a..ac91f19c9b50 100644
--- a/fs/proc/uid.c
+++ b/fs/proc/uid.c
@@ -281,10 +281,10 @@ static struct dentry *proc_uid_lookup(struct inode *dir, struct dentry *dentry,
 	return ERR_PTR(result);
 }
 
-static const struct file_operations proc_uid_operations = {
-	.read		= generic_read_dir,
-	.iterate	= proc_uid_readdir,
-	.llseek		= default_llseek,
+static const struct proc_ops proc_uid_operations = {
+	.proc_read	= generic_read_dir,
+//	.proc_iterate	= proc_uid_readdir,
+	.proc_lseek	= default_llseek,
 };
 
 static const struct inode_operations proc_uid_inode_operations = {
@@ -298,7 +298,7 @@ int __init proc_uid_init(void)
 	if (!proc_uid)
 		return -ENOMEM;
 	proc_uid->proc_iops = &proc_uid_inode_operations;
-	proc_uid->proc_fops = &proc_uid_operations;
+	proc_uid->proc_ops = &proc_uid_operations;
 
 	return 0;
 }
