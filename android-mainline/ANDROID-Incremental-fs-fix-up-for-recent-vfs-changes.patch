From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@google.com>
Date: Sat, 6 Mar 2021 19:50:59 +0100
Subject: ANDROID: Incremental fs: fix up for recent vfs changes

Lots of different vfs changes happened in 7d6beb71da3c ("Merge tag
'idmapped-mounts-v5.12' of
git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux") which were
not made to incfs as it is out-of-tree :(

So fix it up by doing a quick port to the initial user namespace and
hopefully all works properly now, at least it builds :)

Fixes: 7d6beb71da3c ("Merge tag 'idmapped-mounts-v5.12' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux")
Cc: Paul Lawrence <paullawrence@google.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
Change-Id: I32899a792fbfad9455d504868e7a02d30a0a6049
---
 fs/incfs/format.c       |  2 +-
 fs/incfs/pseudo_files.c | 21 ++++++-------
 fs/incfs/verity.c       |  2 +-
 fs/incfs/vfs.c          | 65 +++++++++++++++++++++++------------------
 4 files changed, 50 insertions(+), 40 deletions(-)

diff --git a/fs/incfs/format.c b/fs/incfs/format.c
--- a/fs/incfs/format.c
+++ b/fs/incfs/format.c
@@ -85,7 +85,7 @@ static int truncate_backing_file(struct backing_file_context *bfc,
 	attr.ia_valid = ATTR_SIZE;
 
 	inode_lock(inode);
-	result = notify_change(dentry, &attr, NULL);
+	result = notify_change(&init_user_ns, dentry, &attr, NULL);
 	inode_unlock(inode);
 
 	return result;
diff --git a/fs/incfs/pseudo_files.c b/fs/incfs/pseudo_files.c
--- a/fs/incfs/pseudo_files.c
+++ b/fs/incfs/pseudo_files.c
@@ -194,7 +194,7 @@ static int chmod(struct dentry *dentry, umode_t mode)
 	inode_lock(inode);
 	newattrs.ia_mode = (mode & S_IALLUGO) | (inode->i_mode & ~S_IALLUGO);
 	newattrs.ia_valid = ATTR_MODE | ATTR_CTIME;
-	error = notify_change(dentry, &newattrs, &delegated_inode);
+	error = notify_change(&init_user_ns, dentry, &newattrs, &delegated_inode);
 	inode_unlock(inode);
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
@@ -586,8 +586,8 @@ static long ioctl_create_file(struct file *file,
 	/* Creating a file in the .index dir. */
 	index_dir_inode = d_inode(mi->mi_index_dir);
 	inode_lock_nested(index_dir_inode, I_MUTEX_PARENT);
-	error = vfs_create(index_dir_inode, index_file_dentry, args.mode | 0222,
-			   true);
+	error = vfs_create(&init_user_ns, index_dir_inode, index_file_dentry,
+			   args.mode | 0222, true);
 	inode_unlock(index_dir_inode);
 
 	if (error)
@@ -604,7 +604,7 @@ static long ioctl_create_file(struct file *file,
 	}
 
 	/* Save the file's ID as an xattr for easy fetching in future. */
-	error = vfs_setxattr(index_file_dentry, INCFS_XATTR_ID_NAME,
+	error = vfs_setxattr(&init_user_ns, index_file_dentry, INCFS_XATTR_ID_NAME,
 		file_id_str, strlen(file_id_str), XATTR_CREATE);
 	if (error) {
 		pr_debug("incfs: vfs_setxattr err:%d\n", error);
@@ -613,7 +613,7 @@ static long ioctl_create_file(struct file *file,
 
 	/* Save the file's size as an xattr for easy fetching in future. */
 	size_attr_value = cpu_to_le64(args.size);
-	error = vfs_setxattr(index_file_dentry, INCFS_XATTR_SIZE_NAME,
+	error = vfs_setxattr(&init_user_ns, index_file_dentry, INCFS_XATTR_SIZE_NAME,
 		(char *)&size_attr_value, sizeof(size_attr_value),
 		XATTR_CREATE);
 	if (error) {
@@ -641,7 +641,7 @@ static long ioctl_create_file(struct file *file,
 			goto out;
 		}
 
-		error = vfs_setxattr(index_file_dentry,
+		error = vfs_setxattr(&init_user_ns, index_file_dentry,
 				INCFS_XATTR_METADATA_NAME,
 				attr_value, args.file_attr_len,
 				XATTR_CREATE);
@@ -809,7 +809,7 @@ static long ioctl_create_mapped_file(struct file *file, void __user *arg)
 		goto out;
 	}
 
-	error = vfs_getxattr(source_file_dentry, INCFS_XATTR_SIZE_NAME,
+	error = vfs_getxattr(&init_user_ns, source_file_dentry, INCFS_XATTR_SIZE_NAME,
 			     (char *)&size_attr_value, sizeof(size_attr_value));
 	if (error < 0)
 		goto out;
@@ -859,7 +859,8 @@ static long ioctl_create_mapped_file(struct file *file, void __user *arg)
 
 	parent_inode = d_inode(parent_dir_path.dentry);
 	inode_lock_nested(parent_inode, I_MUTEX_PARENT);
-	error = vfs_create(parent_inode, file_dentry, args.mode | 0222, true);
+	error = vfs_create(&init_user_ns, parent_inode, file_dentry,
+			   args.mode | 0222, true);
 	inode_unlock(parent_inode);
 	if (error)
 		goto out;
@@ -872,7 +873,7 @@ static long ioctl_create_mapped_file(struct file *file, void __user *arg)
 
 	/* Save the file's size as an xattr for easy fetching in future. */
 	size_attr_value = cpu_to_le64(args.size);
-	error = vfs_setxattr(file_dentry, INCFS_XATTR_SIZE_NAME,
+	error = vfs_setxattr(&init_user_ns, file_dentry, INCFS_XATTR_SIZE_NAME,
 		(char *)&size_attr_value, sizeof(size_attr_value),
 		XATTR_CREATE);
 	if (error) {
@@ -1278,7 +1279,7 @@ static bool get_pseudo_inode(int ino, struct inode *inode)
 	inode->i_size = 0;
 	inode->i_ino = ino;
 	inode->i_private = NULL;
-	inode_init_owner(inode, NULL, S_IFREG | READ_WRITE_FILE_MODE);
+	inode_init_owner(&init_user_ns, inode, NULL, S_IFREG | READ_WRITE_FILE_MODE);
 	inode->i_op = &incfs_file_inode_ops;
 	inode->i_fop = pseudo_file_operations[i];
 	return true;
diff --git a/fs/incfs/verity.c b/fs/incfs/verity.c
--- a/fs/incfs/verity.c
+++ b/fs/incfs/verity.c
@@ -102,7 +102,7 @@ static int incfs_end_enable_verity(struct file *filp, u8 *sig, size_t sig_size)
 	/*
 	 * Set verity xattr so we can set S_VERITY without opening backing file
 	 */
-	error = vfs_setxattr(bfc->bc_file->f_path.dentry,
+	error = vfs_setxattr(&init_user_ns, bfc->bc_file->f_path.dentry,
 			     INCFS_XATTR_VERITY_NAME, NULL, 0, XATTR_CREATE);
 	if (error) {
 		pr_warn("incfs: error setting verity xattr: %d\n", error);
diff --git a/fs/incfs/vfs.c b/fs/incfs/vfs.c
--- a/fs/incfs/vfs.c
+++ b/fs/incfs/vfs.c
@@ -32,7 +32,8 @@ static void dentry_release(struct dentry *d);
 static int iterate_incfs_dir(struct file *file, struct dir_context *ctx);
 static struct dentry *dir_lookup(struct inode *dir_inode,
 		struct dentry *dentry, unsigned int flags);
-static int dir_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode);
+static int dir_mkdir(struct user_namespace *ns, struct inode *dir,
+		     struct dentry *dentry, umode_t mode);
 static int dir_unlink(struct inode *dir, struct dentry *dentry);
 static int dir_link(struct dentry *old_dentry, struct inode *dir,
 			 struct dentry *new_dentry);
@@ -54,11 +55,13 @@ static struct inode *alloc_inode(struct super_block *sb);
 static void free_inode(struct inode *inode);
 static void evict_inode(struct inode *inode);
 
-static int incfs_setattr(struct dentry *dentry, struct iattr *ia);
+static int incfs_setattr(struct user_namespace *ns, struct dentry *dentry,
+			 struct iattr *ia);
 static ssize_t incfs_getxattr(struct dentry *d, const char *name,
 			void *value, size_t size);
-static ssize_t incfs_setxattr(struct dentry *d, const char *name,
-			const void *value, size_t size, int flags);
+static ssize_t incfs_setxattr(struct user_namespace *ns, struct dentry *d,
+			      const char *name, const void *value, size_t size,
+			      int flags);
 static ssize_t incfs_listxattr(struct dentry *d, char *list, size_t size);
 
 static int show_options(struct seq_file *, struct dentry *);
@@ -72,9 +75,9 @@ static const struct super_operations incfs_super_ops = {
 	.show_options = show_options
 };
 
-static int dir_rename_wrap(struct inode *old_dir, struct dentry *old_dentry,
-		struct inode *new_dir, struct dentry *new_dentry,
-		unsigned int flags)
+static int dir_rename_wrap(struct user_namespace *ns, struct inode *old_dir,
+			   struct dentry *old_dentry, struct inode *new_dir,
+			   struct dentry *new_dentry, unsigned int flags)
 {
 	return dir_rename(old_dir, old_dentry, new_dir, new_dentry);
 }
@@ -134,11 +137,12 @@ static int incfs_handler_getxattr(const struct xattr_handler *xh,
 }
 
 static int incfs_handler_setxattr(const struct xattr_handler *xh,
+				  struct user_namespace *ns,
 				  struct dentry *d, struct inode *inode,
 				  const char *name, const void *buffer,
 				  size_t size, int flags)
 {
-	return incfs_setxattr(d, name, buffer, size, flags);
+	return incfs_setxattr(ns, d, name, buffer, size, flags);
 }
 
 static const struct xattr_handler incfs_xattr_handler = {
@@ -247,7 +251,7 @@ static u64 read_size_attr(struct dentry *backing_dentry)
 	__le64 attr_value;
 	ssize_t bytes_read;
 
-	bytes_read = vfs_getxattr(backing_dentry, INCFS_XATTR_SIZE_NAME,
+	bytes_read = vfs_getxattr(&init_user_ns, backing_dentry, INCFS_XATTR_SIZE_NAME,
 			(char *)&attr_value, sizeof(attr_value));
 
 	if (bytes_read != sizeof(attr_value))
@@ -259,7 +263,7 @@ static u64 read_size_attr(struct dentry *backing_dentry)
 /* Read verity flag from the attribute. Quicker than reading the header */
 static bool read_verity_attr(struct dentry *backing_dentry)
 {
-	return vfs_getxattr(backing_dentry, INCFS_XATTR_VERITY_NAME, NULL, 0)
+	return vfs_getxattr(&init_user_ns, backing_dentry, INCFS_XATTR_VERITY_NAME, NULL, 0)
 		>= 0;
 }
 
@@ -412,7 +416,7 @@ static struct dentry *open_or_create_special_dir(struct dentry *backing_dir,
 
 	/* Index needs to be created. */
 	inode_lock_nested(backing_inode, I_MUTEX_PARENT);
-	err = vfs_mkdir(backing_inode, index_dentry, 0777);
+	err = vfs_mkdir(&init_user_ns, backing_inode, index_dentry, 0777);
 	inode_unlock(backing_inode);
 
 	if (err)
@@ -532,7 +536,7 @@ int incfs_link(struct dentry *what, struct dentry *where)
 	int error = 0;
 
 	inode_lock_nested(pinode, I_MUTEX_PARENT);
-	error = vfs_link(what, pinode, where, NULL);
+	error = vfs_link(what, &init_user_ns, pinode, where, NULL);
 	inode_unlock(pinode);
 
 	dput(parent_dentry);
@@ -546,7 +550,7 @@ int incfs_unlink(struct dentry *dentry)
 	int error = 0;
 
 	inode_lock_nested(pinode, I_MUTEX_PARENT);
-	error = vfs_unlink(pinode, dentry, NULL);
+	error = vfs_unlink(&init_user_ns, pinode, dentry, NULL);
 	inode_unlock(pinode);
 
 	dput(parent_dentry);
@@ -560,7 +564,7 @@ static int incfs_rmdir(struct dentry *dentry)
 	int error = 0;
 
 	inode_lock_nested(pinode, I_MUTEX_PARENT);
-	error = vfs_rmdir(pinode, dentry);
+	error = vfs_rmdir(&init_user_ns, pinode, dentry);
 	inode_unlock(pinode);
 
 	dput(parent_dentry);
@@ -960,7 +964,7 @@ static struct dentry *dir_lookup(struct inode *dir_inode, struct dentry *dentry,
 	return ERR_PTR(err);
 }
 
-static int dir_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
+static int dir_mkdir(struct user_namespace *ns, struct inode *dir, struct dentry *dentry, umode_t mode)
 {
 	struct mount_info *mi = get_mount_info(dir->i_sb);
 	struct inode_info *dir_node = get_incfs_node(dir);
@@ -996,7 +1000,7 @@ static int dir_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 		goto out;
 	}
 	inode_lock_nested(dir_node->n_backing_inode, I_MUTEX_PARENT);
-	err = vfs_mkdir(dir_node->n_backing_inode, backing_dentry, mode | 0222);
+	err = vfs_mkdir(ns, dir_node->n_backing_inode, backing_dentry, mode | 0222);
 	inode_unlock(dir_node->n_backing_inode);
 	if (!err) {
 		struct inode *inode = NULL;
@@ -1046,7 +1050,7 @@ static int file_delete(struct mount_info *mi, struct dentry *dentry,
 	if (nlink > 3)
 		goto just_unlink;
 
-	uuid_size = vfs_getxattr(backing_dentry, INCFS_XATTR_ID_NAME,
+	uuid_size = vfs_getxattr(&init_user_ns, backing_dentry, INCFS_XATTR_ID_NAME,
 			file_id_str, 2 * sizeof(incfs_uuid_t));
 	if (uuid_size < 0) {
 		error = uuid_size;
@@ -1270,6 +1274,7 @@ static int dir_rename(struct inode *old_dir, struct dentry *old_dentry,
 	struct dentry *backing_new_dir_dentry;
 	struct inode *target_inode;
 	struct dentry *trap;
+	struct renamedata rd = {};
 	int error = 0;
 
 	error = mutex_lock_interruptible(&mi->mi_dir_struct_mutex);
@@ -1311,9 +1316,11 @@ static int dir_rename(struct inode *old_dir, struct dentry *old_dentry,
 		goto unlock_out;
 	}
 
-	error = vfs_rename(d_inode(backing_old_dir_dentry), backing_old_dentry,
-			d_inode(backing_new_dir_dentry), backing_new_dentry,
-			NULL, 0);
+	rd.old_dir	= d_inode(backing_old_dir_dentry);
+	rd.old_dentry	= backing_old_dentry;
+	rd.new_dir	= d_inode(backing_new_dir_dentry);
+	rd.new_dentry	= backing_new_dentry;
+	error = vfs_rename(&rd);
 	if (error)
 		goto unlock_out;
 	if (target_inode)
@@ -1515,7 +1522,8 @@ static void evict_inode(struct inode *inode)
 	clear_inode(inode);
 }
 
-static int incfs_setattr(struct dentry *dentry, struct iattr *ia)
+static int incfs_setattr(struct user_namespace *ns, struct dentry *dentry,
+			 struct iattr *ia)
 {
 	struct dentry_info *di = get_incfs_dentry(dentry);
 	struct dentry *backing_dentry;
@@ -1542,7 +1550,7 @@ static int incfs_setattr(struct dentry *dentry, struct iattr *ia)
 	}
 
 	inode_lock(d_inode(backing_dentry));
-	error = notify_change(backing_dentry, ia, NULL);
+	error = notify_change(ns, backing_dentry, ia, NULL);
 	inode_unlock(d_inode(backing_dentry));
 
 	if (error)
@@ -1551,7 +1559,7 @@ static int incfs_setattr(struct dentry *dentry, struct iattr *ia)
 	if (S_ISREG(backing_inode->i_mode))
 		ia->ia_mode &= ~0222;
 
-	return simple_setattr(dentry, ia);
+	return simple_setattr(ns, dentry, ia);
 }
 
 static ssize_t incfs_getxattr(struct dentry *d, const char *name,
@@ -1564,7 +1572,7 @@ static ssize_t incfs_getxattr(struct dentry *d, const char *name,
 	int i;
 
 	if (di && di->backing_path.dentry)
-		return vfs_getxattr(di->backing_path.dentry, name, value, size);
+		return vfs_getxattr(&init_user_ns, di->backing_path.dentry, name, value, size);
 
 	if (strcmp(name, "security.selinux"))
 		return -ENODATA;
@@ -1588,8 +1596,9 @@ static ssize_t incfs_getxattr(struct dentry *d, const char *name,
 }
 
 
-static ssize_t incfs_setxattr(struct dentry *d, const char *name,
-			const void *value, size_t size, int flags)
+static ssize_t incfs_setxattr(struct user_namespace *ns, struct dentry *d,
+			      const char *name, const void *value, size_t size,
+			      int flags)
 {
 	struct dentry_info *di = get_incfs_dentry(d);
 	struct mount_info *mi = get_mount_info(d->d_sb);
@@ -1598,8 +1607,8 @@ static ssize_t incfs_setxattr(struct dentry *d, const char *name,
 	int i;
 
 	if (di && di->backing_path.dentry)
-		return vfs_setxattr(di->backing_path.dentry, name, value, size,
-				    flags);
+		return vfs_setxattr(ns, di->backing_path.dentry, name, value,
+				    size, flags);
 
 	if (strcmp(name, "security.selinux"))
 		return -ENODATA;
